[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "OneHotEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "PCA",
        "importPath": "sklearn.decomposition",
        "description": "sklearn.decomposition",
        "isExtraImport": true,
        "detail": "sklearn.decomposition",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "stats",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "df = pd.read_csv(r'C:\\Users\\Setup User\\Documents\\GitHub\\CAPcourse\\CAPcourse\\datasets\\carSales.csv')\n# Data cleaning\n## Handle missing values\ndf.fillna(method='ffill', inplace=True) # Example: forward fill\n## Remove duplicate records\ndf.drop_duplicates(inplace=True)\n## Convert data types\ndf['Annual Income'] = df['Annual Income'].astype(int)\ndf['Date'] = pd.to_datetime(df['Date'])\ndf['Car_id'] = df['Car_id'].str.replace('C_CND_', '')",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "df['Date']",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "df['Date'] = pd.to_datetime(df['Date'])\ndf['Car_id'] = df['Car_id'].str.replace('C_CND_', '')\n# Select only numeric columns for the correlation matrix\n#numeric_df = df.select_dtypes(include=[np.number])\n# Convert 'Gender' to numeric: Male=0, Female=1\ndf['Gender_numeric'] = df['Gender'].map({'Male': 0, 'Female': 1})\n# Convert 'Transmission' to numeric: Manual=0, Auto=1\ndf['Transmission_numeric'] = df['Transmission'].map({'Manual': 0, 'Auto': 1})\ncolumns_of_interest = ['Annual Income', 'Price ($)', 'Gender_numeric', 'Transmission_numeric']\nsubset_df = df[columns_of_interest]",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "df['Car_id']",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "df['Car_id'] = df['Car_id'].str.replace('C_CND_', '')\n# Select only numeric columns for the correlation matrix\n#numeric_df = df.select_dtypes(include=[np.number])\n# Convert 'Gender' to numeric: Male=0, Female=1\ndf['Gender_numeric'] = df['Gender'].map({'Male': 0, 'Female': 1})\n# Convert 'Transmission' to numeric: Manual=0, Auto=1\ndf['Transmission_numeric'] = df['Transmission'].map({'Manual': 0, 'Auto': 1})\ncolumns_of_interest = ['Annual Income', 'Price ($)', 'Gender_numeric', 'Transmission_numeric']\nsubset_df = df[columns_of_interest]\n## Normalize numerical features",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "#numeric_df",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "#numeric_df = df.select_dtypes(include=[np.number])\n# Convert 'Gender' to numeric: Male=0, Female=1\ndf['Gender_numeric'] = df['Gender'].map({'Male': 0, 'Female': 1})\n# Convert 'Transmission' to numeric: Manual=0, Auto=1\ndf['Transmission_numeric'] = df['Transmission'].map({'Manual': 0, 'Auto': 1})\ncolumns_of_interest = ['Annual Income', 'Price ($)', 'Gender_numeric', 'Transmission_numeric']\nsubset_df = df[columns_of_interest]\n## Normalize numerical features\nscaler = StandardScaler()\ndf['Annual Income'] = scaler.fit_transform(df[['Annual Income']])",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "df['Gender_numeric']",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "df['Gender_numeric'] = df['Gender'].map({'Male': 0, 'Female': 1})\n# Convert 'Transmission' to numeric: Manual=0, Auto=1\ndf['Transmission_numeric'] = df['Transmission'].map({'Manual': 0, 'Auto': 1})\ncolumns_of_interest = ['Annual Income', 'Price ($)', 'Gender_numeric', 'Transmission_numeric']\nsubset_df = df[columns_of_interest]\n## Normalize numerical features\nscaler = StandardScaler()\ndf['Annual Income'] = scaler.fit_transform(df[['Annual Income']])\n## Handle outliers (example using Z-score)\nprint(f\"Dataset dimensions: {df.shape}\")",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "df['Transmission_numeric']",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "df['Transmission_numeric'] = df['Transmission'].map({'Manual': 0, 'Auto': 1})\ncolumns_of_interest = ['Annual Income', 'Price ($)', 'Gender_numeric', 'Transmission_numeric']\nsubset_df = df[columns_of_interest]\n## Normalize numerical features\nscaler = StandardScaler()\ndf['Annual Income'] = scaler.fit_transform(df[['Annual Income']])\n## Handle outliers (example using Z-score)\nprint(f\"Dataset dimensions: {df.shape}\")\n# Provide descriptive statistics\nprint(df.describe(include='all'))",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "columns_of_interest",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "columns_of_interest = ['Annual Income', 'Price ($)', 'Gender_numeric', 'Transmission_numeric']\nsubset_df = df[columns_of_interest]\n## Normalize numerical features\nscaler = StandardScaler()\ndf['Annual Income'] = scaler.fit_transform(df[['Annual Income']])\n## Handle outliers (example using Z-score)\nprint(f\"Dataset dimensions: {df.shape}\")\n# Provide descriptive statistics\nprint(df.describe(include='all'))\n# Data Visualizations",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "subset_df",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "subset_df = df[columns_of_interest]\n## Normalize numerical features\nscaler = StandardScaler()\ndf['Annual Income'] = scaler.fit_transform(df[['Annual Income']])\n## Handle outliers (example using Z-score)\nprint(f\"Dataset dimensions: {df.shape}\")\n# Provide descriptive statistics\nprint(df.describe(include='all'))\n# Data Visualizations\n## Box plot for Annual Income",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "scaler",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "scaler = StandardScaler()\ndf['Annual Income'] = scaler.fit_transform(df[['Annual Income']])\n## Handle outliers (example using Z-score)\nprint(f\"Dataset dimensions: {df.shape}\")\n# Provide descriptive statistics\nprint(df.describe(include='all'))\n# Data Visualizations\n## Box plot for Annual Income\nsns.boxplot(x='Annual Income', y='Gender', native_scale=True, data=df)\nplt.show()",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "encoder",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "encoder = OneHotEncoder(sparse_output=False)\nencoded_features = encoder.fit_transform(df[['Gender', 'Transmission']])\n## PCA for dimensionality reduction\npca = PCA(n_components=2)\ndf_pca = pca.fit_transform(df.select_dtypes(include=[np.number]))",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "encoded_features",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "encoded_features = encoder.fit_transform(df[['Gender', 'Transmission']])\n## PCA for dimensionality reduction\npca = PCA(n_components=2)\ndf_pca = pca.fit_transform(df.select_dtypes(include=[np.number]))",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "pca",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "pca = PCA(n_components=2)\ndf_pca = pca.fit_transform(df.select_dtypes(include=[np.number]))",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    },
    {
        "label": "df_pca",
        "kind": 5,
        "importPath": "completedAssignments.CarSalesOpt",
        "description": "completedAssignments.CarSalesOpt",
        "peekOfCode": "df_pca = pca.fit_transform(df.select_dtypes(include=[np.number]))",
        "detail": "completedAssignments.CarSalesOpt",
        "documentation": {}
    }
]